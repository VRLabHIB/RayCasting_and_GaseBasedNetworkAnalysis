library(igraph)
project_path = dirname(rstudioapi::getSourceEditorContext()$path)
data_path <- paste0(project_path, '/data/')
start_time <- Sys.time()
df_trans <- read.csv(paste0(data_path, "transition_R.csv"), row.names=1)
edges <- df_trans
edges$participant <- NULL
edges$time_point <- NULL
edges$trans_dur <- NULL
edges$weight <- NULL
mat <- as.matrix(get.adjacency(graph.data.frame(edges)))
# Create graph
g <- graph_from_adjacency_matrix(mat, mode="directed",weighted = TRUE)
deltatime <- Sys.time() - start_time
max_cliques(g)
max_cliques(g, subset = c('S11_C', 'S12_C', 'S13_C', 'S14_C', 'S15_C', 'S16_C',
'S17_C', 'S22_C', 'S23_C', 'S24_C', 'S27_C', 'S28_C',
'S32_C', 'S33_C', 'S34_C', 'S35_C', 'S36_C', 'S37_C',
'S38_C', 'S42_C', 'S43_C', 'S44_C', 'S47_C', 'S48_C'))
View(g)
subv <- c('S11_C', 'S12_C', 'S13_C', 'S14_C', 'S15_C', 'S16_C',
'S17_C', 'S22_C', 'S23_C', 'S24_C', 'S27_C', 'S28_C',
'S32_C', 'S33_C', 'S34_C', 'S35_C', 'S36_C', 'S37_C',
'S38_C', 'S42_C', 'S43_C', 'S44_C', 'S47_C', 'S48_C')
sg <- induced.subgraph(graph=g,vids=subv)
colnames(mat)
stud <- c('S11_C', 'S12_C', 'S13_C', 'S14_C', 'S15_C', 'S16_C',
'S17_C', 'S22_C', 'S23_C', 'S24_C', 'S27_C', 'S28_C',
'S32_C', 'S33_C', 'S34_C', 'S35_C', 'S36_C', 'S37_C',
'S38_C', 'S42_C', 'S43_C', 'S44_C', 'S47_C', 'S48_C')
subv <- Reduce(intersect, list(colnames(mat), stud))
sg <- induced.subgraph(graph=g,vids=subv)
max_cliques(sg)
cl <- max_cliques(sg)
View(cl)
for (l in cl){
if (len(l)>1){
print(l)
}
}
for (l in cl){
if (length(l)>1){
print(l)
}
}
cl_count <- 0
for (l in cl){
if (length(l)>1){
cl_count <- cl_count +1
}
}
# Count the number of cliques containing only student OOIs larger than 1
stud <- c('S11_C', 'S12_C', 'S13_C', 'S14_C', 'S15_C', 'S16_C',
'S17_C', 'S22_C', 'S23_C', 'S24_C', 'S27_C', 'S28_C',
'S32_C', 'S33_C', 'S34_C', 'S35_C', 'S36_C', 'S37_C',
'S38_C', 'S42_C', 'S43_C', 'S44_C', 'S47_C', 'S48_C')
subv <- Reduce(intersect, list(colnames(mat), stud))
sg <- induced.subgraph(graph=g,vids=subv)
cl <- max_cliques(sg)
cl_count <- 0
for (l in cl){
if (length(l)>1){
cl_count <- cl_count +1
}
}
print('Number of cliques: ', cl_count)
print(paste0('Number of cliques: ', cl_count))
start_time <- Sys.time()
stud <- c('S11_C', 'S12_C', 'S13_C', 'S14_C', 'S15_C', 'S16_C',
'S17_C', 'S22_C', 'S23_C', 'S24_C', 'S27_C', 'S28_C',
'S32_C', 'S33_C', 'S34_C', 'S35_C', 'S36_C', 'S37_C',
'S38_C', 'S42_C', 'S43_C', 'S44_C', 'S47_C', 'S48_C')
subv <- Reduce(intersect, list(colnames(mat), stud))
sg <- induced.subgraph(graph=g,vids=subv)
cl <- max_cliques(sg)
cl_count <- 0
for (l in cl){
if (length(l)>1){
cl_count <- cl_count +1
}
}
print(paste0('Number of cliques: ', cl_count))
deltatime <- Sys.time() - start_time
deltatime
node <- "CartoonTeacher"
edges <- as_data_frame(neighbors(G, node, mode = "out"))
edges <- edges[, c("from", "to")] # Extracting source and target nodes
# Extracting weights from the graph
edge_ids <- get.edge.ids(G, c(node, edges$to))
weights <- E(G)$weight[edge_ids]
# Sort weights
sorted_weights <- sort(weights)
# Calculate sum of outgoing weights
sumw <- sum(weights)
DC <- length(edges)
FCi <- numeric(DC - 1)
for (i in 1:(DC - 1)) {
fj <- 0
for (j in 1:i) {
fj <- fj + sorted_weights[j] / sumw
}
FCi[i] <- fj
}
WDC <- 1 + 2 * sum(FCi)
node <- "CartoonTeacher"
edges <- as_data_frame(neighbors(G, node, mode = "out"))
edges <- edges[, c("from", "to")] # Extracting source and target nodes
# Extracting weights from the graph
edge_ids <- get.edge.ids(G, c(node, edges$to))
weights <- E(G)$weight[edge_ids]
G <- graph_from_adjacency_matrix(mat, mode="directed",weighted = TRUE)
node <- "CartoonTeacher"
edges <- as_data_frame(neighbors(G, node, mode = "out"))
edges <- edges[, c("from", "to")] # Extracting source and target nodes
# Extracting weights from the graph
edge_ids <- get.edge.ids(G, c(node, edges$to))
weights <- E(G)$weight[edge_ids]
node <- "CartoonTeacher"
edges <- as_data_frame(neighbors(G, node, mode = "out"))
edges <- edges[, c("from", "to")] # Extracting source and target nodes
View(edges)
edges <- neighbors(G, node, mode = "out")
edges <- data.frame(neighbors(G, node, mode = "out"))
View(edges)
# Extracting weights from the graph
edge_ids <- get.edge.ids(G, c(node, edges$to))
View(edges)
E(g)$weight <- E(g)$weight / sum(E(g)$weight)
G <- graph_from_adjacency_matrix(mat, mode="directed",weighted = TRUE)
E(G)$weight <- E(G)$weight / sum(E(G)$weight)
edges <- data.frame(neighbors(G, node, mode = "out"))
View(edges)
E(G)$weight
G <- graph_from_adjacency_matrix(mat, mode="directed",weighted = TRUE)
E(G)$weight
E(G)$weight <- E(G)$weight / sum(E(G)$weight)
edges <- data.frame(neighbors(G, node, mode = "out"))
View(edges)
edges <- data.frame(neighbors(G, node, mode = "total"))
View(edges)
edges <- data.frame(neighbors(G, node, mode = "out"))
colnames(edges) <- 'Weight'
View(edges)
edges$Weight <- edges$Weight / sum(E(G)$weight)
View(edges)
sum(E(G)$weight)
G <- graph_from_adjacency_matrix(mat, mode="directed",weighted = TRUE)
node <- "CartoonTeacher"
edges <- data.frame(neighbors(G, node, mode = "out"))
colnames(edges) <- 'Weight'
edges$Weight <- edges$Weight / sum(E(G)$weight)
View(edges)
edges <- list(neighbors(G, node, mode = "out"))
edges <- edges / sum(E(G)$weight)
View(edges)
edges$Weight <- sort(edges$Weight)
View(edges)
node <- "CartoonTeacher"
edges <- data.frame(neighbors(G, node, mode = "out"))
colnames(edges) <- 'Weight'
edges$Weight <- edges$Weight / sum(E(G)$weight)
edges$Weight <- sort(edges$Weight)
View(edges)
edges <- data.frame(neighbors(G, node, mode = "in"))
colnames(edges) <- 'Weight'
edges$Weight <- edges$Weight / sum(E(G)$weight)
edges$Weight <- sort(edges$Weight)
View(edges)
G <- graph_from_adjacency_matrix(mat, mode="directed",weighted = TRUE)
edges <- data.frame(neighbors(G, node, mode = "out"))
View(edges)
df_trans <- read.csv(paste0(data_path, "transition_Pyt.csv"), row.names=1)
df_trans <- read.csv(paste0(data_path, "transition_Pyt.csv"))#, row.names=1)
View(df_trans)
edges <- df_trans
edges$participant <- NULL
edges$time_point <- NULL
edges$trans_dur <- NULL
edges$weight <- NULL
mat <- as.matrix(get.adjacency(graph.data.frame(edges)))
G <- graph_from_adjacency_matrix(mat, mode="directed",weighted = TRUE)
deltatime <- Sys.time() - start_time
node <- "CartoonTeacher"
edges <- data.frame(neighbors(G, node, mode = "out"))
View(edges)
View(df_trans)
adj <- df_trans %>% group_by(c('Source', 'Target')) %>% tally()
#### Start testing ####
library(pryr)
adj <- df_trans %>% group_by(c('Source', 'Target')) %>% tally()
adj <- df_trans %>% group_by(c('Source', 'Target')) %>% summarise(avg = sum(x))
adj <- df_trans %>% group_by(c('Source', 'Target')) %>% summarize(avg = sum(x))
adj <- df_trans %>% group_by(c('Source', 'Target')) %>% summarize(avg = n(x))
# No creation of adjecency dataset necessary
library(dplyr )
adj <- df_trans %>% group_by(c('Source', 'Target')) %>% summarise(avg = n(x))
adj <- df_trans %>% group_by(c('Source', 'Target')) %>% tally()
adj <- df_trans %>% group_by('Source', 'Target') %>% tally()
View(adj)
View(df_trans)
dfs <- df_trans
dfs$Weight <- 1
adj <- dfs %>% group_by('Source', 'Target') %>% summarise(sum(Weight))
adj <- dfs %>% group_by('Source', 'Target') %>% tally()
dfs <- df_trans
dfs$participant <- NULL
dfs$time_point <- NULL
dfs$trans_dur <- NULL
dfs$Weight <- 1
adj <- dfs %>% group_by('Source', 'Target') %>% tally()
View(dfs)
adj <- dfs %>% group_by('Source', 'Target') %>% summarise(sum)
adj <- dfs %>% group_by('Source', 'Target') %>% summarise(sum(Weight))
adj <- dfs %>% group_by('Source', 'Target') %>% summarise(across(everything(), sum = sum))
adj <- dfs %>% group_by('Source', 'Target') %>% summarise(across(Weight,sum))
adj <- dfs %>% group_by(Source, Target) %>% summarise(across(Weight,sum))
adj <- dfs %>% group_by(Source, Target) %>% summarise(across(Weight,sum(Weight)))
adj <- dfs %>% group_by(Source, Target) %>% summarise(sum(Weight))
adj <- dfs %>% group_by(Source, Target) %>% summarise(weight = sum(Weight))
View(adj)
mat <- as.matrix(get.adjacency(graph.data.frame(adj)))
View(mat)
mat <- as.matrix(get.adjacency(adj))
graph.data.frame(adj)
mat <- as.matrix(get.adjacency(graph.data.frame(adj, vertices=adj)))
levs <- unique(unlist(adj, use.names = FALSE))
mat <- table(lapply(adj, factor, levs))
mat <- matrix(lapply(adj, factor, levs))
View(mat)
ppi <- data.frame(protein_A = paste0("protein", seq_len(10)),
protein_B = paste0("protein", c(rep(3, 2), rep(5, 5),
rep(7, 3))))
adj <- adjacency_matrix_from_data_frame(ppi)
mat <- as.matrix(get.adjacency(graph.data.frame(adj, vertices=adj)))
mat <- as.matrix(get.adjacency(graph.data.frame(adj)))
G <- graph_from_adjacency_matrix(mat, mode="directed",weighted = TRUE)
g <- set.edge.attribute(G, "weight", index=E(g), adj$Weight)
g <- set.edge.attribute(G, "weight", index=E(G), adj$Weight)
# Create graph
g <- graph_from_edgelist(as.matrix(adj[1:,1:2]), directed=F)
# Create graph
g <- graph_from_edgelist(as.matrix(adj[:,1:2]), directed=F)
# Create graph
g <- graph_from_edgelist(as.matrix(adj[1:n,1:2]), directed=F)
# Create graph
n <- nrows(adj)
nrows?
nrows?
# Create graph
n <- nrow(adj)
# Create graph
n <- nrow(adj)
g <- graph_from_edgelist(as.matrix(adj[1:n,1:2]), directed=F)
g <- set.edge.attribute(g, "weight", index=E(g), adj$Weight)
View(adj)
g <- set.edge.attribute(g, "weight", index=E(g), adj$weight)
View(g)
node <- "CartoonTeacher"
edges <- data.frame(neighbors(G, node, mode = "out"))
View(edges)
n <- nrow(adj)
G <- graph_from_edgelist(as.matrix(adj[1:n,1:2]), directed=F)
G <- set.edge.attribute(G, "weight", index=E(G), adj$weight)
node <- "CartoonTeacher"
edges <- data.frame(neighbors(G, node, mode = "out"))
View(edges)
View(G)
G[[1]][["CartoonTeacher"]]
E(G)$weight
strength(G, vids=V(CartoonTeacher), mode="all")
strength(G, vids=V("CartoonTeacher"), mode="all")
strength(G, vids="CartoonTeacher", mode="all")
strength(G, vids="CartoonTeacher", mode="out")
edges <- data.frame(neighbors(G, node, mode = "in"))
out
strength(G, vids="CartoonTeacher", mode="out")
strength(G, vids="CartoonTeacher", mode="in")
n <- nrow(adj)
G <- graph_from_edgelist(as.matrix(adj[1:n,1:2]), directed=TRUE)
G <- set.edge.attribute(G, "weight", index=E(G), adj$weight)
strength(G, vids="CartoonTeacher", mode="in")
strength(G, vids="CartoonTeacher", mode="out")
View(G)
View(adj)
# Extracting weights from the graph
weights <- adj[adj$Source=="CartoonTeacher"]
# Extracting weights from the graph
weights <- adj[,adj$Source=="CartoonTeacher"]
# Extracting weights from the graph
weights <- adj[adj$Source=="CartoonTeacher",]
View(weights)
# Extracting weights from the graph
weights <- adj[adj$Source=="CartoonTeacher",]$weight
# Sort weights
sorted_weights <- sort(weights)
# Calculate sum of outgoing weights
sumw <- sum(weights)
DC <- length(edges)
FCi <- numeric(DC - 1)
for (i in 1:(DC - 1)) {
fj <- 0
for (j in 1:i) {
fj <- fj + sorted_weights[j] / sumw
}
FCi[i] <- fj
}
WDC <- 1 + 2 * sum(FCi)
# Extracting weights from the graph
adj$weight_n <- adj$weight / sum(adj$weight)
weights <- adj[adj$Source=="CartoonTeacher",]$weight_n
sorted_weights <- sort(weights)
# Calculate sum of outgoing weights
sumw <- sum(weights)
DC <- length(edges)
FCi <- numeric(DC - 1)
for (i in 1:(DC - 1)) {
fj <- 0
for (j in 1:i) {
fj <- fj + sorted_weights[j] / sumw
}
FCi[i] <- fj
}
WDC <- 1 + 2 * sum(FCi)
DC <- length(sorted_weights)
# Extracting weights from the graph
adj$weight_n <- adj$weight / sum(adj$weight)
weights <- adj[adj$Source=="CartoonTeacher",]$weight_n
# Sort weights
sorted_weights <- sort(weights)
# Calculate sum of outgoing weights
sumw <- sum(weights)
DC <- length(sorted_weights)
FCi <- numeric(DC - 1)
for (i in 1:(DC - 1)) {
fj <- 0
for (j in 1:i) {
fj <- fj + sorted_weights[j] / sumw
}
FCi[i] <- fj
}
WDC <- 1 + 2 * sum(FCi)
start_time <- Sys.time()
# Extracting weights from the adjecency matrix
adj$weight_n <- adj$weight / sum(adj$weight)
weights <- adj[adj$Source=="CartoonTeacher",]$weight_n
# Sort weights
sorted_weights <- sort(weights)
# Calculate sum of outgoing weights
sumw <- sum(weights)
DC <- length(sorted_weights)
FCi <- numeric(DC - 1)
for (i in 1:(DC - 1)) {
fj <- 0
for (j in 1:i) {
fj <- fj + sorted_weights[j] / sumw
}
FCi[i] <- fj
}
WDC <- 1 + 2 * sum(FCi)
deltatime <- Sys.time() - start_time
deltatime
start_time <- Sys.time()
# Create adjacency dataset
dfs <- df_trans
dfs$participant <- NULL
dfs$time_point <- NULL
dfs$trans_dur <- NULL
dfs$Weight <- 1
adj <- dfs %>% group_by(Source, Target) %>% summarise(weight = sum(Weight))
# Create graph
n <- nrow(adj)
G <- graph_from_edgelist(as.matrix(adj[1:n,1:2]), directed=TRUE)
G <- set.edge.attribute(G, "weight", index=E(G), adj$weight)
deltatime <- Sys.time() - start_time
deltatime
