project_path = dirname(rstudioapi::getSourceEditorContext()$path)

#### Start testing ####
library(pryr)
data_path <- paste0(project_path, '/data/')


# Load the original datafile and preprocess it
start_time <- Sys.time()
df <- read.csv(paste0(data_path, "final_A116.csv"))
# select subset
dfs <- df[c("real_time", "object", "left.pupil_diameter_mm", "right.pupil_diameter_mm")]
dfs <- dfs[!(dfs$left.pupil_diameter_mm==-1 | dfs$right.pupil_diameter_mm==-1),]
dfs <- dfs[complete.cases(dfs),]
colnames(dfs) <- c('time', 'gaze_target', 'left.pupil_diameter_mm', 'right.pupil_diameter_mm')
write.csv(dfs, paste0(data_path, "smaller_subset_R.csv"))
deltatime <- Sys.time() - start_time


# Create transition matrix
start_time <- Sys.time()

df <- read.csv(paste0(data_path, "smaller_subset_R.csv"))

ID <- "001"

ID_lst_new <- vector()
source_lst <- vector()
target_lst <- vector()
time_lst <- vector()
trans_time_lst <- vector()

source <- df$gaze_target[1]

for (i in 2:nrow(df)) {
  if (source != df$gaze_target[i]) {
    ID_lst_new <- c(ID_lst_new, ID)
    time_lst <- c(time_lst, df$time[i - 1])
    trans_time_lst <- c(trans_time_lst, df$time[i] - df$time[i - 1])
    source_lst <- c(source_lst, source)
    target_lst <- c(target_lst, df$gaze_target[i])
    
    source <- df$gaze_target[i]
  }
}


df_trans <- data.frame(participant = ID_lst_new, time_point = time_lst, trans_dur = trans_time_lst,
                       Source = source_lst, Target = target_lst)

write.csv(df_trans, paste0(data_path, "transition_R.csv"))

deltatime <- Sys.time() - start_time


# No creation of adjecency dataset necessary

# Transform tansition datat directly into graph
library(igraph)
project_path = dirname(rstudioapi::getSourceEditorContext()$path)
data_path <- paste0(project_path, '/data/')

start_time <- Sys.time()

df_trans <- read.csv(paste0(data_path, "transition_R.csv"), row.names=1)
edges <- df_trans
edges$participant <- NULL
edges$time_point <- NULL
edges$trans_dur <- NULL
edges$weight <- NULL

mat <- as.matrix(get.adjacency(graph.data.frame(edges)))

# Create graph

g <- graph_from_adjacency_matrix(mat, mode="directed",weighted = TRUE)

deltatime <- Sys.time() - start_time




